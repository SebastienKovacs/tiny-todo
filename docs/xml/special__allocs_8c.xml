<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="special__allocs_8c" kind="file" language="C++">
    <compoundname>special_allocs.c</compoundname>
    <includes refid="special__allocs_8h" local="yes">special_allocs.h</includes>
    <incdepgraph>
      <node id="54">
        <label>stdlib.h</label>
      </node>
      <node id="52">
        <label>src/special_allocs.c</label>
        <link refid="special__allocs_8c"/>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>special_allocs.h</label>
        <link refid="special__allocs_8h"/>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="special__allocs_8c_1a88096054ddc86913497fd58517582e69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char ***</type>
        <definition>char*** alloc_data</definition>
        <argsstring>(int dim1, int dim2)</argsstring>
        <name>alloc_data</name>
        <param>
          <type>int</type>
          <declname>dim1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Basically allocs a triple char pointer according the the dimensions specified in the parameters. Used to alloc the char ***data which holds a complete table from the database. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/special_allocs.c" line="8" column="1" bodyfile="src/special_allocs.c" bodystart="8" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="special__allocs_8c_1aedf57266b606045967b8ab72a802fb76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_data</definition>
        <argsstring>(char ***data, int dim1, int dim2)</argsstring>
        <name>free_data</name>
        <param>
          <type>char ***</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Frees memory allocated above. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/special_allocs.c" line="25" column="1" bodyfile="src/special_allocs.c" bodystart="25" bodyend="34"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="special__allocs_8h" kindref="compound">special_allocs.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="special__allocs_8h_1a88096054ddc86913497fd58517582e69" refkind="member"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>***<ref refid="special__allocs_8c_1a88096054ddc86913497fd58517582e69" kindref="member">alloc_data</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim2)</highlight></codeline>
<codeline lineno="9"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>***data<sp/>=<sp/>malloc<sp/>(dim1<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**));</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim1;<sp/>++i){</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[i]<sp/>=<sp/>malloc<sp/>(dim2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*));</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>dim2;<sp/>++j){</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[i][j]<sp/>=<sp/>malloc<sp/>(50<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="special__allocs_8h_1aedf57266b606045967b8ab72a802fb76" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="special__allocs_8c_1aedf57266b606045967b8ab72a802fb76" kindref="member">free_data</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>***data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim2)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim1;<sp/>++i){</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>dim2;<sp/>++j){</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free<sp/>(data[i][j]);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free<sp/>(data[i]);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>free<sp/>(data);</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/special_allocs.c"/>
  </compounddef>
</doxygen>
