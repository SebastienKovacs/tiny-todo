.TH "src/postgres.c" 3 "Wed Jul 24 2019" "Version 0.1" "tiny-todo" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/postgres.c
.SH SYNOPSIS
.br
.PP
\fC#include 'postgres\&.h'\fP
.br
\fC#include 'select_day\&.h'\fP
.br
\fC#include 'special_allocs\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBget_rows\fP (PGresult *res, char *date)"
.br
.ti -1c
.RI "int \fBget_columns\fP (PGresult *res, char *date)"
.br
.ti -1c
.RI "char *** \fBget_data\fP (char *date)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int get_columns (PGresult * res, char * date)"
Same as above but with columns instead of rows\&. 
.PP
Definition at line 77 of file postgres\&.c\&.
.SS "char*** get_data (char * date)"
The big function of this file\&. It takes the whole table out of the db and puts it in this triple char pointer, aka a string table and return it\&. 
.PP
Definition at line 116 of file postgres\&.c\&.
.SS "int get_rows (PGresult * res, char * date)"
This function is very usefull for the times you want to do memory allocation for a pointer to fit a part or the whole database in it\&. The function returns the number of rows in a table in a db\&. I use it in the for loops in \fBspecial_allocs\&.c\fP 
.PP
Definition at line 56 of file postgres\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for tiny-todo from the source code\&.
